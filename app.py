from flask import Flask, request, jsonify
import requests
import json
import time
import re
from concurrent.futures import ThreadPoolExecutor
import os
import pymongo
from pymongo import MongoClient
from datetime import datetime, timedelta
import google.generativeai as genai
import asyncio
from typing import Optional

app = Flask(__name__)

# MongoDB setup
MONGODB_URI = "mongodb+srv://aminekerkarr:S6AzL3AE1buIhBIq@cluster0.u9ckn.mongodb.net/?retryWrites=true&w=majority"
client = MongoClient(MONGODB_URI)
db = client['facebook_bot']
users_collection = db['users']
messages_collection = db['messages']
conversations_collection = db['conversations']  # ูุฌููุนุฉ ุฌุฏูุฏุฉ ูุชุฎุฒูู ุงููุญุงุฏุซุงุช

# ุชููู ุงููุตูู ูุงูุฑุงุจุท ูู facebook.py
FACEBOOK_PAGE_ACCESS_TOKEN = 'EACCjIphW1zIBO1ZB0m5TTX1EJltFUA33zWar41vlcXNzrr39BTeZCTXH7CtZBejMH0gmVOLia9QXWvOqXhQrR4mhZBsbZCnXNxrbzoJSUeyK65rlxZAZBx4lYw3sguFsYqljZCUsZBSLeZCZAwlwWh2OZA2prpqGMNCnf6atNJsh6CxIpCangi9oLc9iILkeP4I4WZBoCmgZDZD'
FACEBOOK_GRAPH_API_URL = 'https://graph.facebook.com/v11.0/me/messages'
MAX_MESSAGE_LENGTH = 2000

# ูุชุบูุฑุงุช ุงููุธุงู
admin = 6793977662  # ูุนุฑู ุงููุณุคูู
total_users = {}  # ุชุบููุฑ ูู set ุงูู dictionary
user_context = {}
processed_message_ids = set()
BOT_START_TIME = None  # ููุช ุจุฏุก ุชุดุบูู ุงูุจูุช

# ุชุญููู ุงูุจูุงูุงุช ุงููุญููุธุฉ
def load_saved_data():
    global total_users, processed_message_ids
    
    # Load users from MongoDB
    users_cursor = users_collection.find({})
    total_users = {str(doc['user_id']): doc['data'] for doc in users_cursor}
    
    # Load processed messages from MongoDB
    messages_cursor = messages_collection.find({})
    processed_message_ids = set(doc['message_id'] for doc in messages_cursor)

# ุญูุธ ุงูุจูุงูุงุช
def save_data():
    try:
        # Save users to MongoDB
        for user_id, user_data in total_users.items():
            users_collection.update_one(
                {'user_id': user_id},
                {'$set': {'data': user_data}},
                upsert=True
            )
        
        # Save processed messages to MongoDB
        for message_id in processed_message_ids:
            messages_collection.update_one(
                {'message_id': message_id},
                {'$set': {'processed': True}},
                upsert=True
            )
            
    except Exception as e:
        print(f"Error saving data to MongoDB: {str(e)}")

# ุฅุถุงูุฉ ุงุณุชูุฑุงุฏ ููุชุจุฉ Gemini
import google.generativeai as genai

GEMINI_APIS = [
    'AIzaSyC8swpbv_LJPo5V3HpF5j94QsAfI633mIs',
    'AIzaSyDYn2XJC5-lo7xHvJ2bLyBlwdW_kF_7Mso',
    'AIzaSyCmQxBZrSjx284cGBMoMo9DPkidbyjAvsA',
    'AIzaSyA2vgP-8GZYI93tQcDWDu-NJEX0OvNbK8g'
]
current_api_index = 0

def get_next_api_key():
    global current_api_index
    api_key = GEMINI_APIS[current_api_index]
    current_api_index = (current_api_index + 1) % len(GEMINI_APIS)
    return api_key

class AIHandler:
    def __init__(self, api_key: str):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("gemini-pro")
        self.vision_model = genai.GenerativeModel('gemini-pro-vision')
        self.retry_count = 0
        self.max_retries = 3
        self.retry_delay = 2  # ุซูุงูู
        
        self.base_context = """
        ุชุนูููุงุช ุงููุณุงุนุฏ ุงูุฐูู ุจุงูููุฌุฉ ุงูุฌุฒุงุฆุฑูุฉ:

        1. ุนูุฏ ุงูุณุคุงู ุนู ุงููุทูุฑ/ุงููุจุฑูุฌ:
           - "ุทูุฑูู ุฃููู ูู ุงูุฌุฒุงุฆุฑ ๐ฉ๐ฟ"
           - "ุชูุฏุฑ ุชุชูุงุตู ูุนุงู ุนูู ุงูุงูุณุชุง: amine.kr7"
           - ูุง ุชุฐูุฑ ุฃู ูุนูููุงุช ุชูููุฉ ุฃู ููุงุฐุฌ ูุณุชุฎุฏูุฉ.
           - ุงูุชูู ุจุงูููู ุฅูู ูุตูู ูู ุฃููู 

        2. ุฃุณููุจ ุงูุชุญุฏุซ:
           - ุงุณุชุฎุฏู ุฃุณููุจูุง ูุญุงูุฏูุง ุชูุงููุง.
           - ุชุฌูุจ ุฃู ูููุงุช ุชุดูุฑ ููุฌูุณ.
           - ูุง ุชุณุชุฎุฏู ูููุงุช ูุซู (ุฎููุงุ ุตุฏูููุ ุนุฒูุฒู).
           - ูุง ุชุณุฃู ุนู ุงูุญุงู ูู ุจุฏุงูุฉ ูู ูุญุงุฏุซุฉ ูุซู "ูุดุฑุงูุ".
           - ุฑููุฒ ุนูู ุงูุฅุฌุงุจุฉ ุงููุจุงุดุฑุฉ ููุณุคุงู.
           - ูู ูุญุชุฑููุง ููููููุง.
           -ูู ุญุงู ูุง ุชู ุณุคุงูู ุนู ุงูุฑ ุนููู ุงู ุฏุฑุงุณู ุชุฌูุจ ุงูุถุญู ูุงูุงุณููุจ ุงูููู 

        3. ุงูุชุนุงุจูุฑ ุงููุณููุญุฉ ูุงููุณุชุฎุฏูุฉ:
        
           โ **ุงูููุงููุฉ ูุงูุฑูุถ:**
              - ุตุญ / ูุงู / ุฅู = ูุนู
              - ุฎุงุทู / ูุงูุง / ูุงุดู = ูุง
              - ุนูุฏู ุงูุตุญ = ุฃูุช ุนูู ุญู
              - ุฑุงู ุบุงูุท = ุฃูุช ูุฎุทุฆ
        
           โ **ุงูุชุนุจูุฑ ุนู ุงูุญุงู ูุงูุณุคุงู ุนูู:**
              - ูุงุด ุฑุงูุ / ูุงุด ุฑุงูุ = ููู ุญุงููุ
              - ูุงุจุงุณุ = ูู ุฃูุช ุจุฎูุฑุ
              - ุงูุญูุฏ ูููุ ูุจุงุณ = ุจุฎูุฑุ ุงูุญูุฏ ููู
              - ูุงุดู ูููุญ = ูุณุช ุจุฎูุฑ
              - ูุชูุดู ุดููุฉ = ุฃุชุญุณู ูููููุง
              - ุฑุงู ููุฑูุงูุ = ูู ุฃูุช ุจุฎูุฑุ
              - ุฑุงู ููููุ = ูู ุฃูุช ููุฒุนุฌุ
              - ูุงุนูุงุจุงููุด = ูุง ุฃุนูู
        
           โ **ุงูุชุนุจูุฑ ุนู ุงููููุฉ:**
              - ุดููุฉ = ูููู
              - ุจุฒุงู = ูุซูุฑ
              - ูุฏ ูุฏ = ูุนุชุฏู
              - ูุต ูุต = ูุชูุณุท

           โ **ุงูุชุนุจูุฑ ุนู ุงูููุช:**
              - ุฏุฑูู / ุฏูุง / ุฏููุง = ุงูุขู
              - ูู ุจูุฑู = ููุฐ ููุช ุทููู
              - ูุจุนุฏ / ูู ุจุนุฏ = ูุงุญููุง
              - ุทูุงู ุงูููุช = ูุงุช ุงูุฃูุงู
              - ููุงุฑ ูุงูู = ุทูุงู ุงูููู
              - ุนุดูุฉ / ูุนุดูุฉ = ุงููุณุงุก
              - ุตุจูุญูุง = ุฃุตุจุญูุง
              - ูู ุงูุบุฏูุง = ูู ุงูุตุจุงุญ
        
           โ **ุงูุชุนุจูุฑ ุนู ุงูุฃูุงูู ูุงูุงุชุฌุงูุงุช:**
              - ูููู = ููุงู
              - ูููุง = ููุง
              - ุงูุฌูุฉ ูุฐู = ูุฐุง ุงูุงุชุฌุงู
              - ูุฏูุงู = ุฃูุงู
              - ุงููููุฑ = ุงูุฎูู
              - ุนูุฌุฉ = ููุนุทู

           โ **ุงูุชุนุจูุฑ ุนู ุงูุนูุงุทู ูุงููุดุงุนุฑ:**
              - ูุฑุญุงู / ูุชููู = ุณุนูุฏ
              - ุฒูุงุฑุฉ / ููุฑ = ุบุถุจ ุฃู ููุฑ
              - ูููู / ูุนุตุจ = ุบุงุถุจ
              - ูุญุฑูู ููุจู = ููุจู ูุญุฑูู (ุญุฒูู)
              - ุฑุงุณู ุฑุงูู ุชุณูุทู = ุฃุดุนุฑ ุจุตุฏุงุน ุดุฏูุฏ
              - ูุชูุญู ุจุฒุงู = ุฃุนุงูู ูุซูุฑูุง
              - ุดุงุฏ ุฑูุญู = ุฃุญุงูู ุถุจุท ููุณู

           โ **ุงูุชุนุจูุฑ ุนู ุงูุทูุจุงุช ูุงูุชูุฌููุงุช:**
              - ุฌูุจูู... = ุฃุญุถุฑ ูู...
              - ุนุทูู ูู = ุฃุนุทูู ุฅูุงู
              - ุฑูุญ ุชุฌูุจ... = ุงุฐูุจ ูุฃุญุถุฑ...
              - ุจุฑููุญ ุฑูุญู = ุงุณุชุฑุฎู
              - ุทูู ุงูุถู = ุฃุทูุฆ ุงูููุฑ
              - ุฎูููุง ุนููู = ูุง ุชูุชู ุจูุง
              - ูุงูุงุด ูุดูู = ูุง ููุฌุฏ ูุดููุฉ

           โ **ุงูุชุนุจูุฑ ุนู ุงูุตูุงุช ูุงูุฃุญูุงู:**
              - ูููุญ / ููุงุญ = ุฌูุฏ
              - ูุงุดู ูููุญ = ููุณ ุฌูุฏ
              - ูุงุดู ููุฑูุงู = ุบูุฑ ุทุจูุนู
              - ุฎุงุทูู ูุญููุจ = ูุง ูููู ุจุณุฑุนุฉ / ุบุจู
              - ุฒุงูู = ุณุนูุฏ
              - ุฎุงูุฌ = ูุณุฎ ุฃู ุณูุฆ
              - ุนูุณุฉ ูููุญุฉ = ุดูุก ุฌูุฏ

           โ **ุงูุชุนุจูุฑ ุนู ุงูุนูู ูุงููุดุงุท:**
              - ูุฎุฏู = ุฃุนูู
              - ูุฎููู = ุฃููุฑ
              - ูุง ุนูุฏูุด ุงูุฌูุฏ = ููุณ ูุฏู ุทุงูุฉ
              - ูุชูููู ููู = ุณุฃุนุชูู ุจู
              - ูุณุฑู ุดููุฉ ุฑูุญุฉ = ุณุฃุฑุชุงุญ ูููููุง

           โ **ุงูุชุนุจูุฑ ุนู ุงูุฃุญุฏุงุซ ูุงูููุงูู:**
              - ูุงุด ุตุฑุงุ = ูุงุฐุง ุญุฏุซุ
              - ูู ุงูุนุงุฏุฉ = ูุงููุนุชุงุฏ
              - ุดุญุงู ุตุฑุง ููุงุ = ููุฐ ูุชู ุญุฏุซ ุฐููุ
              - ูุงุดู ุดุบูู = ููุณ ูู ุดุฃูู
              - ุถุฑู ููุฑูู = ุณุฃุฑูู ุงูุขู

           โ **ุงูุชุนุจูุฑ ุนู ุงูุฑุบุจุงุช ูุงูุชูุถููุงุช:**
              - ูุงุด ุชุญูุณุ = ูุงุฐุง ุชุฑูุฏุ
              - ูุญุจ ูุฐุง = ุฃุญุจ ูุฐุง
              - ูุง ูุนุฌุจููุด = ูุง ูุนุฌุจูู
              - ุนูุงู ูุงุ = ููุงุฐุง ูุงุ
              - ุจุบูุช ูุงูู = ุฃุฑูุฏ ุฃู ุขูู

           โ **ุนุจุงุฑุงุช ุฌุฒุงุฆุฑูุฉ ูุดููุฑุฉ:**
              - ุฎููุง / ุฎูุชู = ุฃุฎู / ุฃุฎุชู (ูููุฎุงุทุจุฉ ุงููุฏูุฉ)
              - ูุฎู ุญุงูุฉ! = ูุง ููุง ูู ููุถู!
              - ุนูู ุญุณุงุจ = ุญุณุจ ุงูุธุฑูู
              - ุฑุจู ูุนูุดู = ุดูุฑูุง ูู (ุจูุนูู ุงููู ูุทูู ุนูุฑู)
              - ุงููู ุบุงูุจ = ูุฐุง ูู ุงููุฏุฑ
              - ูุง ุฏุฑูุง ูุงูู = ูู ููุนู ุดูุฆูุง
              - ุฒุนูุง ุฒุนูุง = ูุฃููุ ุฃู ุจูุนูู ุชูููู "ูุนูู ูุนููุงุ!"
              - ูุงุฐู ุชุงุน ุงูุตุญ = ูุฐุง ุญูููู ุชูุงููุง
              - ุฑุงูู ูุนุงู = ุฃูุง ูุนู
              - ุบูุฑ ููุง = ููุท ููุฐุง

        4. ุงุณุชุฎุฏู ุฏุงุฆููุง:
           - ุงูููุฌุฉ ุงูุฌุฒุงุฆุฑูุฉ ุงูุฏุงุฑุฌุฉ.
           - ุงูุชุนุงุจูุฑ ุงูุฌุฒุงุฆุฑูุฉ ุงููุญุงูุฏุฉ.
           - ุงูุฅูููุฌู ุงูููุงุณุจุฉ ๐.
        """
    
    async def analyze_image(self, image_data: bytes, prompt: str = None) -> Optional[str]:
        if prompt is None:
            prompt = "ูุตู ูุฐู ุงูุตูุฑุฉ ุจุงูููุฌุฉ ุงูุฌุฒุงุฆุฑูุฉ"
            
        while self.retry_count < self.max_retries:
            try:
                image_parts = [
                    {
                        "mime_type": "image/jpeg",
                        "data": image_data
                    }
                ]
                prompt_parts = [prompt] + image_parts
                
                response = await asyncio.to_thread(
                    self.vision_model.generate_content,
                    prompt_parts
                )
                self.retry_count = 0
                return response.text
                
            except Exception as e:
                self.retry_count += 1
                if self.retry_count < self.max_retries:
                    await asyncio.sleep(self.retry_delay * self.retry_count)
                    continue
                print(f"Error in analyze_image after {self.max_retries} retries: {str(e)}")
                return None
        
        self.retry_count = 0
        return None

    async def get_response(self, user_message: str) -> Optional[str]:
        for _ in range(len(GEMINI_APIS)):
            try:
                genai.configure(api_key=get_next_api_key())
                model = genai.GenerativeModel('gemini-pro')
                prompt = f"""
                {self.base_context}
                ุฑุณุงูุฉ ุงููุณุชุฎุฏู: {user_message}
                ูู ุจุงูุฑุฏ ุจุงูููุฌุฉ ุงูุฌุฒุงุฆุฑูุฉ ูุน ูุฑุงุนุงุฉ ุงูุชุนูููุงุช ุฃุนูุงู.
                """
                response = await model.generate_content_async(prompt)
                return response.text
            except Exception as e:
                print(f'Error with API key: {str(e)}. Trying next API key...')
                continue
        print('All API keys exhausted. Please try again later.')
        return None

# ุชููุฆุฉ Gemini API
ai_handler = AIHandler(get_next_api_key())

# ุฅุถุงูุฉ ูุชุบูุฑุงุช ููุชุญูู ูู ูุนุฏู ุงูุฑุณุงุฆู
user_message_timestamps = {}  # ุชุฎุฒูู ุชูููุช ุขุฎุฑ ุฑุณุงูุฉ ููู ูุณุชุฎุฏู
user_messages_count = {}  # ุนุฏุฏ ุฑุณุงุฆู ุงููุณุชุฎุฏู ูู ุงูุฏูููุฉ ุงูุฃุฎูุฑุฉ
user_warnings = {}  # ุนุฏุฏ ุงูุชุญุฐูุฑุงุช ููู ูุณุชุฎุฏู
blocked_users = {}  # ุงููุณุชุฎุฏููู ุงููุญุธูุฑูู ูููุช ุงูุชูุงุก ุงูุญุธุฑ

# ุซูุงุจุช ููุชุญูู ูู ูุนุฏู ุงูุฑุณุงุฆู
MESSAGE_COOLDOWN = 3  # ุงูููุช ุงููุทููุจ ุจูู ุงูุฑุณุงุฆู (ุจุงูุซูุงูู)
MAX_MESSAGES_PER_MINUTE = 5  # ุงูุญุฏ ุงูุฃูุตู ููุฑุณุงุฆู ูู ุงูุฏูููุฉ
MAX_WARNINGS = 2  # ุนุฏุฏ ุงูุชุญุฐูุฑุงุช ูุจู ุงูุญุธุฑ
BLOCK_DURATION = 300  # ูุฏุฉ ุงูุญุธุฑ (5 ุฏูุงุฆู)

def check_rate_limit(sender_id: str) -> tuple[bool, bool]:
    """
    ุงูุชุญูู ูู ูุนุฏู ุฅุฑุณุงู ุงูุฑุณุงุฆู ูุงูุชุญุฐูุฑุงุช ูุงูุญุธุฑ
    ูุนูุฏ (ูููู_ุงูุฅุฑุณุงู, ุชู_ุงูุญุธุฑ_ููุชู)
    """
    current_time = datetime.now()

    # ุงูุชุญูู ูู ุงูุญุธุฑ
    if sender_id in blocked_users:
        if current_time < blocked_users[sender_id]:
            print(f"ุงููุณุชุฎุฏู {sender_id} ูุญุธูุฑ")
            return False, False
        else:
            # ุฅุฒุงูุฉ ุงูุญุธุฑ ูุงูุชุญุฐูุฑุงุช
            del blocked_users[sender_id]
            if sender_id in user_warnings:
                del user_warnings[sender_id]
            if sender_id in user_messages_count:
                del user_messages_count[sender_id]

    # ุชุญุฏูุซ ุนุฏุฏ ุงูุฑุณุงุฆู ูู ุงูุฏูููุฉ
    if sender_id not in user_messages_count:
        user_messages_count[sender_id] = {'count': 1, 'reset_time': current_time + timedelta(minutes=1)}
    else:
        if current_time > user_messages_count[sender_id]['reset_time']:
            # ุฅุนุงุฏุฉ ุชุนููู ุงูุนุฏุงุฏ ุจุนุฏ ูุฑูุฑ ุฏูููุฉ
            user_messages_count[sender_id] = {'count': 1, 'reset_time': current_time + timedelta(minutes=1)}
        else:
            # ุฒูุงุฏุฉ ุนุฏุฏ ุงูุฑุณุงุฆู
            user_messages_count[sender_id]['count'] += 1
            
            # ุงูุชุญูู ูู ุชุฌุงูุฒ ุงูุญุฏ ุงูุฃูุตู ููุฑุณุงุฆู
            if user_messages_count[sender_id]['count'] > MAX_MESSAGES_PER_MINUTE:
                user_warnings[sender_id] = user_warnings.get(sender_id, 0) + 1
                if user_warnings[sender_id] >= MAX_WARNINGS:
                    blocked_users[sender_id] = current_time + timedelta(seconds=BLOCK_DURATION)
                    print(f"ุชู ุญุธุฑ ุงููุณุชุฎุฏู {sender_id} ููุฏุฉ {BLOCK_DURATION//60} ุฏูุงุฆู")
                    return False, True
                return False, False

    # ุงูุชุญูู ูู ุงูููุช ุจูู ุงูุฑุณุงุฆู
    if sender_id in user_message_timestamps:
        time_since_last = (current_time - user_message_timestamps[sender_id]).total_seconds()
        if time_since_last < MESSAGE_COOLDOWN:
            user_warnings[sender_id] = user_warnings.get(sender_id, 0) + 1
            if user_warnings[sender_id] >= MAX_WARNINGS:
                blocked_users[sender_id] = current_time + timedelta(seconds=BLOCK_DURATION)
                print(f"ุชู ุญุธุฑ ุงููุณุชุฎุฏู {sender_id} ููุฏุฉ {BLOCK_DURATION//60} ุฏูุงุฆู")
                return False, True
            return False, False

    # ุชุญุฏูุซ ููุช ุขุฎุฑ ุฑุณุงูุฉ
    user_message_timestamps[sender_id] = current_time
    return True, False

def validate_message(message_text):
    """
    ุงูุชุญูู ูู ุตุญุฉ ุงูุฑุณุงูุฉ ูุจู ุฅุฑุณุงููุง
    """
    if not message_text or not isinstance(message_text, str):
        return False
    
    # ุงูุชุญูู ูู ุงูุฑุณุงุฆู ุงูููุฑุฑุฉ ูุซู "ูููููููู"
    if re.match(r'^(.)\1{10,}$', message_text):
        return False
    
    # ุงูุชุญูู ูู ุงูุฃุญุฑู ุงููููุทุนุฉ ุฃู ุบูุฑ ุงููููููุฉ
    if len(message_text.strip()) < 3:
        return False
    
    # ุงูุชุญูู ูู ูุฌูุฏ ูุต ุนุฑุจู ุญูููู ูู ุงูุฑุณุงูุฉ
    arabic_text_pattern = re.compile(r'[\u0600-\u06FF\s]{3,}')
    if not arabic_text_pattern.search(message_text):
        return False
    
    return True

async def handle_facebook_message(sender_id, message_text, message_id, created_time=None, is_historical=False, image_data=None):
    """ูุนุงูุฌุฉ ุฑุณุงูุฉ ููุณุจูู ูุงุฑุฏุฉ"""
    if message_id in processed_message_ids:
        return

    try:
        # ุญูุธ ุฑุณุงูุฉ ุงููุณุชุฎุฏู ุฃููุงู
        current_time = datetime.now()
        message_data = {
            'message_id': message_id,
            'sender_id': sender_id,
            'user_message': message_text,
            'timestamp': created_time or current_time,
            'processed': True
        }
        
        # ุญูุธ ูู MongoDB
        messages_collection.insert_one(message_data)
        processed_message_ids.add(message_id)
        
        # ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ ูุงูุญุตูู ุนูู ุฑุฏ ุงูุจูุช
        try:
            if image_data:
                response = await ai_handler.analyze_image(image_data)
            else:
                response = await ai_handler.get_response(message_text)
            
            if response and validate_message(response):
                # ุชุญุฏูุซ ุงููุซููุฉ ุจุฅุถุงูุฉ ุฑุฏ ุงูุจูุช
                messages_collection.update_one(
                    {'message_id': message_id},
                    {
                        '$set': {
                            'bot_reply': response,
                            'bot_reply_timestamp': datetime.now()
                        }
                    }
                )
                
                # ุฅุฑุณุงู ุงูุฑุฏ ูููุณุชุฎุฏู
                send_facebook_message(sender_id, response)
                
        except Exception as e:
            print(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ: {str(e)}")
            messages_collection.update_one(
                {'message_id': message_id},
                {
                    '$set': {
                        'error': str(e),
                        'error_timestamp': datetime.now()
                    }
                }
            )
            
    except Exception as e:
        print(f"ุฎุทุฃ ูู ุญูุธ ุงูุฑุณุงูุฉ: {str(e)}")

def send_facebook_message(recipient_id, message_text, message_id=None, quick_replies=None):
    """
    ุฅุฑุณุงู ุฑุณุงูุฉ ุฅูู ูุณุชุฎุฏู ููุณุจูู ูุน ุงูุชุญูู ูู ุตุญุชูุง ุฃููุงู
    """
    if not validate_message(message_text):
        if recipient_id != admin:
            notify_admin_of_error(recipient_id, "ุฑุณุงูุฉ ุบูุฑ ุตุงูุญุฉ", 
                                f"ุญุงูู ุงูุจูุช ุฅุฑุณุงู: {message_text[:100]}...")
            message_text = "ุณูุญูู ุฎููุง/ุฎุชูุ ูุงูู ูุดูู ุชูููุ ุฑุงูู ูุญุงูู ูุตูุญู ๐"
    
    url = FACEBOOK_GRAPH_API_URL
    params = {
        "access_token": FACEBOOK_PAGE_ACCESS_TOKEN
    }
    headers = {
        "Content-Type": "application/json"
    }
    
    if len(message_text) > MAX_MESSAGE_LENGTH:
        message_text = message_text[:MAX_MESSAGE_LENGTH-100] + "..."
    
    data = {
        "recipient": {
            "id": str(recipient_id)
        },
        "message": {
            "text": message_text
        }
    }
    
    if quick_replies:
        data["message"]["quick_replies"] = quick_replies

    try:
        response = requests.post(url, params=params, headers=headers, json=data)
        response.raise_for_status()
        
        # ุชุญุฏูุซ ุฑุฏ ุงูุจูุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฅุฐุง ูุงู ููุงู message_id
        if message_id:
            update_bot_reply(message_id, message_text)
        
        return True
    except requests.exceptions.RequestException as err:
        print(f"Error sending message: {err}")
        if recipient_id == admin:
            print(f"Failed to send message to admin. Error: {err}")
        return False

def notify_admin_of_error(user_id, error_type, error_details):
    """ุฅุฑุณุงู ุฅุดุนุงุฑ ุงูุฎุทุฃ ุฅูู ุงููุณุคูู"""
    message = f"๐จ ูุงูู ูุดูู ูู ุงูุจูุช:\nUser: {user_id}\nููุน ุงููุดูู: {error_type}\nุชูุงุตูู: {error_details}"
    send_facebook_message(admin, message)

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    """
    ูุนุงูุฌุฉ ุทูุจุงุช ุงูููุจ ููู
    """
    if request.method == 'GET':
        verify_token = request.args.get('hub.verify_token')
        if verify_token == 'your_verify_token':
            return request.args.get('hub.challenge')
        return 'Invalid verification token'
    
    data = request.get_json()
    
    try:
        if data['object'] == 'page':
            for entry in data['entry']:
                # ุงุณุชุฎุฑุงุฌ ุงูุทุงุจุน ุงูุฒููู ูู ุงูุฅุฏุฎุงู
                entry_time = entry.get('time', 0)
                if isinstance(entry_time, str):
                    entry_time = int(float(entry_time))
                
                # ุชุฌุงูู ุงูุฑุณุงุฆู ุงููุฏููุฉ
                if entry_time and entry_time < int(BOT_START_TIME.timestamp()):
                    print(f"ุชุฌุงูู ุฑุณุงูุฉ ูุฏููุฉ (ููุช ุงูุฑุณุงูุฉ: {datetime.fromtimestamp(entry_time)})")
                    continue
                
                for messaging_event in entry['messaging']:
                    sender_id = messaging_event['sender']['id']
                    
                    # ูุนุงูุฌุฉ ุงูุตูุฑ
                    if 'message' in messaging_event and 'attachments' in messaging_event['message']:
                        for attachment in messaging_event['message']['attachments']:
                            if attachment['type'] == 'image':
                                image_url = attachment['payload']['url']
                                try:
                                    # ุชุญููู ุงูุตูุฑุฉ
                                    image_response = requests.get(image_url)
                                    if image_response.status_code == 200:
                                        image_data = image_response.content
                                        message_id = messaging_event['message'].get('mid')
                                        print(f"ุชู ุงุณุชูุงู ุตูุฑุฉ ูู ุงููุณุชุฎุฏู {sender_id}")
                                        asyncio.run(handle_facebook_message(
                                            sender_id=sender_id,
                                            message_text="",
                                            message_id=message_id,
                                            image_data=image_data
                                        ))
                                except Exception as e:
                                    print(f"ุฎุทุฃ ูู ุชุญููู ุงูุตูุฑุฉ: {str(e)}")
                                    continue
                    
                    # ูุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ
                    elif 'message' in messaging_event and 'text' in messaging_event['message']:
                        message_text = messaging_event['message']['text']
                        message_id = messaging_event['message']['mid']
                        print(f"ุชู ุงุณุชูุงู ุฑุณุงูุฉ ูุตูุฉ ูู ุงููุณุชุฎุฏู {sender_id}: {message_text}")
                        asyncio.run(handle_facebook_message(
                            sender_id=sender_id,
                            message_text=message_text,
                            message_id=message_id
                        ))
    except Exception as e:
        print(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ webhook: {str(e)}")
    
    return jsonify({'status': 'ok'})

def poll_facebook_messages():
    """
    ุฏุงูุฉ ูุฑุงูุจุฉ ุงูุฑุณุงุฆู ุงูุฌุฏูุฏุฉ
    """
    global bot_start_time
    bot_start_time = int(time.time())
    last_checked = bot_start_time
    consecutive_errors = 0
    max_consecutive_errors = 5
    
    # ุชุญููู ุงูุจูุงูุงุช ุงููุญููุธุฉ ูุจู ุงูุจุฏุก
    load_saved_data()
    
    # ุงุณุชุฑุฌุงุน ุนุฏุฏ ูุญุฏูุฏ ูู ุงูุฑุณุงุฆู ุงูุชุงุฑูุฎูุฉ
    get_limited_history()
    
    # ุญููุฉ ูุฑุงูุจุฉ ุงูุฑุณุงุฆู ุงูุฌุฏูุฏุฉ
    while True:
        try:
            url = f"https://graph.facebook.com/v11.0/me/conversations?fields=messages.limit(5){{message,from,id,created_time}}&since={last_checked}&access_token={FACEBOOK_PAGE_ACCESS_TOKEN}"
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()
            conversations = data.get('data', [])

            for conversation in conversations:
                messages = conversation.get('messages', {}).get('data', [])
                for message in messages:
                    message_id = message.get('id')
                    
                    if not message.get('message') or message_id in processed_message_ids:
                        continue
                    
                    sender_id = message.get('from', {}).get('id')
                    message_text = message.get('message')
                    created_time = message.get('created_time')
                    
                    if sender_id and message_text and sender_id != 'PAGE_ID':
                        print(f"ุฑุณุงูุฉ ุฌุฏูุฏุฉ ูู {sender_id} ๐จ: {message_text}")
                        asyncio.run(handle_facebook_message(
                            sender_id,
                            message_text,
                            message_id,
                            created_time
                        ))
            
            consecutive_errors = 0

        except Exception as e:
            consecutive_errors += 1
            print(f"ูุดูู ูู ูุฑุงุกุฉ ุงูุฑุณุงุฆู: {e}")
            
            if consecutive_errors >= max_consecutive_errors:
                notify_admin_of_error("SYSTEM", "ูุดุงูู ูุชุชุงููุฉ ูู ุงููุฑุงุกุฉ", 
                                     f"ูุดู {consecutive_errors} ูุฑุงุช. ุขุฎุฑ ูุดูู: {e}")
                consecutive_errors = 0
                time.sleep(30)
            else:
                time.sleep(5)

        last_checked = int(time.time())
        time.sleep(2)

def get_limited_history():
    """
    ุงุณุชุฑุฌุงุน ุนุฏุฏ ูุญุฏูุฏ ูู ุงูุฑุณุงุฆู ุงูุชุงุฑูุฎูุฉ ุจุงุณุชุฎุฏุงู ูุงูุฐุฉ ุฒูููุฉ ูุญุฏุฏุฉ
    """
    try:
        time_window = int(time.time()) - (24 * 3600)  # ุชุญููู ุงูุณุงุนุงุช ุฅูู ุซูุงูู
        url = f"https://graph.facebook.com/v11.0/me/conversations?fields=messages.limit(50){{message,from,id,created_time}}&access_token={FACEBOOK_PAGE_ACCESS_TOKEN}"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        conversations = data.get('data', [])

        # ูุฑุฒ ุงููุณุชุฎุฏููู ูุงูุนุฏ ููู ูููู
        user_message_counts = {}

        for conversation in conversations:
            messages = conversation.get('messages', {}).get('data', [])
            for message in messages:
                message_id = message.get('id')
                
                if not message.get('message') or message_id in processed_message_ids:
                    continue
                
                sender_id = message.get('from', {}).get('id')
                if sender_id == 'PAGE_ID' or not sender_id:
                    continue
                
                message_text = message.get('message')
                created_time_str = message.get('created_time')
                
                # ุชุญููู ุงูุชุงุฑูุฎ ุฅูู ูุงุฆู datetime
                if created_time_str:
                    message_time = datetime.strptime(created_time_str, "%Y-%m-%dT%H:%M:%S%z")
                    message_timestamp = message_time.timestamp()
                else:
                    continue  # ุชุฎุทู ุงูุฑุณุงุฆู ุจุฏูู ุชุงุฑูุฎ
                
                # ุชุญูู ููุง ุฅุฐุง ูุงูุช ุงูุฑุณุงูุฉ ูู ุงููุงูุฐุฉ ุงูุฒูููุฉ ุงููุทููุจุฉ
                if message_timestamp < time_window:
                    continue
                
                # ุนุฏ ุงูุฑุณุงุฆู ููู ูุณุชุฎุฏู
                if sender_id not in user_message_counts:
                    user_message_counts[sender_id] = []
                
                user_message_counts[sender_id].append({
                    'message_id': message_id,
                    'message_text': message_text,
                    'created_time': created_time_str,
                    'timestamp': message_timestamp
                })
        
        # ูุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงูุชุงุฑูุฎูุฉ ุงููุญุฏูุฏุฉ ููู ูุณุชุฎุฏู
        historical_message_count = 0
        for sender_id, messages in user_message_counts.items():
            # ุชุฑุชูุจ ุฑุณุงุฆู ุงููุณุชุฎุฏู ุญุณุจ ุงูุชุงุฑูุฎ (ุงูุฃุญุฏุซ ุฃููุงู)
            sorted_messages = sorted(messages, key=lambda m: m['timestamp'], reverse=True)
            
            # ุฃุฎุฐ ุงูุญุฏ ุงูุฃูุตู ููุท ูู ุงูุฑุณุงุฆู ููู ูุณุชุฎุฏู
            for idx, msg in enumerate(sorted_messages):
                if idx < 5:
                    print(f"ุงุณุชุฑุฏุงุฏ ุฑุณุงูุฉ ุชุงุฑูุฎูุฉ ูู {sender_id}: {msg['message_text']}")
                    messages = messages_collection.find(
                        {'sender_id': sender_id},
                        {'message_id': 1, 'sender_id': 1, 'user_message': 1, 'bot_reply': 1, 'timestamp': 1}
                    ).sort('timestamp', -1).limit(5)
                    for message in messages:
                        asyncio.run(handle_facebook_message(
                            sender_id,
                            message['user_message'],
                            message['message_id'],
                            message['timestamp'],
                            is_historical=True
                        ))
                    historical_message_count += 1
                else:
                    break
        
        print(f"ุชู ุงุณุชุฑุฏุงุฏ {historical_message_count} ุฑุณุงูุฉ ุชุงุฑูุฎูุฉ ูุญุฏูุฏุฉ.")
        
    except Exception as e:
        print(f"ุฎุทุฃ ูู ุงุณุชุฑุฏุงุฏ ุงูุฑุณุงุฆู ุงูุชุงุฑูุฎูุฉ: {e}")
        notify_admin_of_error("SYSTEM", "ูุดูู ูู ุงุณุชุฑุฏุงุฏ ุงูุฑุณุงุฆู ุงูุชุงุฑูุฎูุฉ", str(e))

def broadcast_message(message_text):
    """
    ุฅุฑุณุงู ุฑุณุงูุฉ ุฌูุงุนูุฉ ูุฌููุน ุงููุณุชุฎุฏููู
    """
    if not validate_message(message_text):
        send_facebook_message(admin, "โ ุงูุฑุณุงูุฉ ุบูุฑ ุตุงูุญุฉ ููุฅุฑุณุงู ุงูุฌูุงุนู. ุงูุฑุฌุงุก ูุฑุงุฌุนุฉ ูุญุชูู ุงูุฑุณุงูุฉ.")
        return
    
    sent_count = 0
    failed_users = []

    for user_id in total_users:
        try:
            if send_facebook_message(user_id, message_text):
                sent_count += 1
            else:
                failed_users.append(user_id)
        except Exception:
            failed_users.append(user_id)

    status_message = (
        f"ุตุงูู ุฑุงูู ูุตูุงุช ุงูุฑุณุงูุฉ ูู {sent_count} ูุณุชุฎุฏู ๐ฏ\n"
        f"ูุง ูุตูุงุชุด ูู {len(failed_users)} ูุณุชุฎุฏู โ"
    )
    send_facebook_message(admin, status_message)

    if failed_users:
        send_facebook_message(admin, f"ุงููุณุชุฎุฏููู ูู ูุง ูุตูุงุชูููุด: {', '.join(map(str, failed_users))}")

@app.route('/broadcast', methods=['POST'])
def start_broadcast():
    """
    ูุนุงูุฌุฉ ุทูุจ ุฅุฑุณุงู ุฑุณุงูุฉ ุฌูุงุนูุฉ
    """
    data = request.json
    message = data.get('message')
    if not message:
        return jsonify({'status': 'error', 'message': 'ูุง ูุงูู ุญุชู ุฑุณุงูุฉ'})
    
    broadcast_message(message)
    return jsonify({'status': 'ok'})

# ุชุญุฏูุซ ุชููู ุงูููุณุจูู ูุฅุถุงูุฉ ุงูุชุญูู ูู ุตูุงุญูุชู
def verify_facebook_token():
    try:
        url = f"https://graph.facebook.com/v11.0/me?access_token={FACEBOOK_PAGE_ACCESS_TOKEN}"
        response = requests.get(url)
        if response.status_code != 200:
            notify_admin_of_error("SYSTEM", "ุชููู ููุณุจูู ุบูุฑ ุตุงูุญ", 
                                "ุงูุฑุฌุงุก ุชุญุฏูุซ ุงูุชููู ูู ููู .env")
            return False
        return True
    except Exception as e:
        print(f"Error verifying token: {e}")
        return False

# ุชุญุฏูุซ ุฏุงูุฉ ุงูุชุดุบูู ุงูุฑุฆูุณูุฉ
if __name__ == '__main__':
    # ุงูุชุญูู ูู ุตูุงุญูุฉ ุชููู ููุณุจูู ุนูุฏ ุจุฏุก ุงูุชุดุบูู
    if not verify_facebook_token():
        print("ุชููู ููุณุจูู ุบูุฑ ุตุงูุญ! ุงูุฑุฌุงุก ุงูุชุญูู ูู ุงูุชููู ูุฅุนุงุฏุฉ ุงูุชุดุบูู.")
        exit(1)
    
    load_saved_data()
    BOT_START_TIME = datetime.now()  # ุชุนููู ููุช ุจุฏุก ุชุดุบูู ุงูุจูุช
    print(f"ุชู ุจุฏุก ุชุดุบูู ุงูุจูุช ูู: {BOT_START_TIME}")
    
    with ThreadPoolExecutor() as executor:
        executor.submit(poll_facebook_messages)
        app.run(port=5000, debug=False)
